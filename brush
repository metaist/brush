#!/usr/bin/env bash

# brush <https://github.com/metaist/brush>
# Copyright Metaist LLC <http://metaist.com>
# Released under MIT License <https://opensource.org/licenses/mit-license>

# brush is a partial port of the chalk NPM package to bash.
# See <https://github.com/chalk/chalk>

BRUSH_SCRIPT=$(basename ${0:-""})
BRUSH_VERSION='1.0.0 (pre)'
BRUSH_ENABLED=true
BRUSH_TERMINAL=false
BRUSH_STYLES=(
  # Taken from: https://github.com/chalk/ansi-styles/blob/master/index.js

  # Other useful references:
  # http://misc.flogisoft.com/bash/tip_colors_and_formatting
  # https://gist.github.com/inexorabletash/9122583
  # https://github.com/maxtsepkov/bash_colors
  # https://github.com/mercuriev/bash_colors/blob/master/bash_colors.sh

  # Modifiers
  'reset'             0 0
  'bold'              1 22  # 21 isn't widely supported; 22 does same thing
  'dim'               2 22
  'faint'             2 22  # alias
  'italic'            3 23  # not widely supported
  'underline'         4 24
  'line'              4 24  # alias
  'blink'             5 25  # not widely supported
  'blinkfast'         6 25  # not widely supported
  'inverse'           7 27
  'hidden'            8 28
  'strikethrough'     9 29  # not widely supported
  'strike'            9 29  # alias; not widely supported

  # Colors
  'black'            30 39
  'red'              31 39
  'green'            32 39
  'yellow'           33 39
  'blue'             34 39
  'magenta'          35 39
  'cyan'             36 39
  'white'            37 39
  'gray'             90 39
  'grey'             90 39  # alias
  'blackBright'      90 39  # alias
  'redBright'        91 39
  'greenBright'      92 39
  'yellowBright'     93 39
  'blueBright'       94 39
  'magentaBright'    95 39
  'cyanBright'       96 39
  'whiteBright'      97 39

  # Background Colors
  'bgBlack'          40 49
  'bgRed'            41 49
  'bgGreen'          42 49
  'bgYellow'         43 49
  'bgBlue'           44 49
  'bgMagenta'        45 49
  'bgCyan'           46 49
  'bgWhite'          47 49
  'bgBlackBright'   100 49
  'bgRedBright'     101 49
  'bgGreenBright'   102 49
  'bgYellowBright'  103 49
  'bgBlueBright'    104 49
  'bgMagentaBright' 105 49
  'bgCyanBright'    106 49
  'bgWhiteBright'   107 49
)

brush_usage() {
  local IFS=$'\n\t'
  local name

  brush auto  # let's handle piping well
  echo -e "\
Usage: $BRUSH_SCRIPT
  [-h|--help] [--version]
  [-TEXT|-t TEXT|--text TEXT]
  [ACTION|MODIFIER|COLOR|BGCOLOR ...]

Keyword Arguments:
  -h, --help    show usage and exit
  --version     show version and exit
  -t, --text    text to display
  ACTION        'on' to enable coloring; 'off' to disable; 'auto' to auto-detect
  MODIFIER      apply a modifier
  COLOR         set the foreground color
  BGCOLOR       set the background color

Modifiers and Colors:
  You may use any of the following (case-insensitive) names to activate a style.
  To end a style, prefix the name with 'end-' or 'end_'. Styles are applied in
  the order they are received.
"
  for ((i = 0; i < ${#BRUSH_STYLES[@]}; i += 3)); do
    name=${BRUSH_STYLES[$i]}
    case "$name" in
      reset) echo -ne "  $(brush $name)$name$(brush) ";;
      hidden) echo -ne "$name ";;
      line|strike|grey|cyanBright|bgCyan|bgBlueBright|bgWhiteBright)
        echo -ne "$(brush $name)$name$(brush)\n  ";;
      *) echo -ne "$(brush $name)$name$(brush) "
    esac
  done

  echo -ne "
Examples:
  \$ brush bold -'Hello ' end-bold blueBright underline -'World\\\\n' reset
  $(brush bold)Hello $(brush end-bold blueBright underline)World$(brush)

  \$ echo \$(brush yellowbright)WARNING\$(brush): Contents under pressure.
  $(brush yellowbright)WARNING$(brush): Contents under pressure.

  # in a script
  source brush
  echo -e \"\$(brush red)Danger\$(brush), Will Robinson!\"
  # produces =>
  $(brush red)DANGER$(brush), Will Robinson!
"
}

brush() {
  local IFS=$'\n\t'
  local args=("${@}")
  local idx=0
  local jdx=0
  local arg=''
  local name=''
  local style=''
  local code=''
  if [[ -z "$@" ]]; then args=('reset'); fi

  for ((idx=0; idx < ${#args[@]}; idx++)); do
    arg=${args[$idx]}
    case "$arg" in
      -h|--help) brush_usage; exit;;
      --version) echo "$BRUSH_SCRIPT $BRUSH_VERSION"; exit;;
      -t|--text) echo -ne "${args[$((idx + 1))]}"; ((idx += 1));;
      -t*) echo -ne "${arg:2}";;
      -*) echo -ne "${arg:1}";;

      on)   BRUSH_ENABLED=true;;
      off)  BRUSH_ENABLED=false;;
      auto) BRUSH_ENABLED=$BRUSH_TERMINAL;;

      *)
        if ! $BRUSH_ENABLED; then continue; fi

        name="${arg^^}"     # uppercase
        name="${name/-/_}"  # replace hyphens with underscores
        code=''
        for ((jdx = 0; jdx < ${#BRUSH_STYLES[@]}; jdx += 3)); do
          style=${BRUSH_STYLES[$jdx]^^}
          if [[ "$name" == "$style" ]]; then
            code=${BRUSH_STYLES[$((jdx + 1))]}
          elif [[ "$name" == "END_$style" ]]; then
            code=${BRUSH_STYLES[$((jdx + 2))]}
          fi

          if [[ "$code" != "" ]]; then
            echo -ne "\e[${code}m"
            break
          fi
        done

        if [[ "$code" == "" ]]; then
          if $BRUSH_TERMINAL; then
            echo -e "\n$(brush reset red)ERROR$(brush): Unknown brush [$name]\n"
          fi
          exit 1
        fi
    esac
  done
}

# Attempt to detect the terminal. Use `brush on` or `brush off` to override.
if [ -t 1 ]; then BRUSH_TERMINAL=true; else BRUSH_TERMINAL=false; fi

# If this script is invoked from the terminal, all args to the main function.
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  brush "$@"
fi
